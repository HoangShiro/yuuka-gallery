# --- MODIFIED FILE: core/data_manager.py ---
import os
import json
import threading
import base64
import time

class DataManager:
    """
    Qu·∫£n l√Ω vi·ªác ƒë·ªçc/ghi d·ªØ li·ªáu t·ª´ file JSON m·ªôt c√°ch an to√†n (thread-safe).
    T·∫•t c·∫£ c√°c truy c·∫≠p d·ªØ li·ªáu t·ª´ L√µi v√† Plugin ƒë·ªÅu ph·∫£i th√¥ng qua class n√†y.
    Bao g·ªìm c·∫£ logic m√£ h√≥a/gi·∫£i m√£ d·ªØ li·ªáu.
    """
    def __init__(self, cache_dir):
        self.cache_dir = cache_dir
        self._locks = {}
        self.B64_PREFIX = "b64:"
        self.OBFUSCATION_KEY = b'yuuka_is_the_best_sensei_at_millennium_seminar'
        os.makedirs(self.cache_dir, exist_ok=True)
        # Yuuka: new image paths v1.0 - T·∫°o c√°c th∆∞ m·ª•c con cho ·∫£nh g·ªëc v√† preview
        os.makedirs(os.path.join(self.cache_dir, 'user_images', 'imgs'), exist_ok=True)
        os.makedirs(os.path.join(self.cache_dir, 'user_images', 'pv_imgs'), exist_ok=True)


    def get_path(self, filename: str) -> str:
        """L·∫•y ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß t·ªõi file trong th∆∞ m·ª•c cache."""
        return os.path.join(self.cache_dir, filename)

    def _get_lock(self, filename: str) -> threading.Lock:
        """L·∫•y ho·∫∑c t·∫°o m·ªôt Lock ri√™ng cho m·ªói file ƒë·ªÉ ƒë·∫£m b·∫£o thread-safety."""
        # Yuuka: D√πng `setdefault` ƒë·ªÉ thao t√°c n√†y c≈©ng l√† thread-safe.
        return self._locks.setdefault(filename, threading.Lock())

    # --- Yuuka: Logic m√£ h√≥a/gi·∫£i m√£ Base64 ƒë∆∞·ª£c chuy·ªÉn v√†o ƒë√¢y ---
    def _encode_string_b64(self, s: str) -> str:
        encoded = base64.b64encode(s.encode('utf-8')).decode('utf-8')
        return f"{self.B64_PREFIX}{encoded}"

    def _decode_string_b64(self, s: str) -> str:
        if s.startswith(self.B64_PREFIX):
            try:
                b64_part = s[len(self.B64_PREFIX):]
                return base64.b64decode(b64_part.encode('utf-8')).decode('utf-8')
            except Exception:
                # N·∫øu gi·∫£i m√£ l·ªói, tr·∫£ v·ªÅ chu·ªói g·ªëc ƒë·ªÉ tr√°nh crash
                return s
        return s

    def _process_data_recursive(self, data, process_func, process_keys=True):
        """H√†m ƒë·ªá quy ƒë·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu, c√≥ t√πy ch·ªçn b·ªè qua x·ª≠ l√Ω key."""
        if isinstance(data, dict):
            processed_dict = {}
            for k, v in data.items():
                # Yuuka: data migration fix v1.1 - Ch·ªâ x·ª≠ l√Ω key n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
                processed_key = process_func(k) if process_keys else k
                processed_dict[processed_key] = self._process_data_recursive(v, process_func, process_keys)
            return processed_dict
        elif isinstance(data, list):
            return [self._process_data_recursive(item, process_func, process_keys) for item in data]
        elif isinstance(data, str):
            # Yuuka: B·ªè qua c√°c URL ·∫£nh kh·ªèi qu√° tr√¨nh x·ª≠ l√Ω
            if data.startswith('/user_image/'):
                return data
            return process_func(data)
        return data

    def read_json(self, filename, default_value={}, obfuscated=False):
        path = self.get_path(filename)
        lock = self._get_lock(filename)
        with lock:
            if not os.path.exists(path):
                return default_value
            try:
                with open(path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                if obfuscated:
                    # Yuuka: data migration fix v1.1 - img_data.json c√≥ key l√† hash (kh√¥ng m√£ h√≥a)
                    # C√°c file kh√°c c√≥ th·ªÉ c√≥ key m√£ h√≥a.
                    process_keys = filename != "img_data.json"
                    return self._process_data_recursive(data, self._decode_string_b64, process_keys=process_keys)
                return data
            except (json.JSONDecodeError, IOError):
                print(f"‚ö†Ô∏è [DataManager] Could not read or decode {path}. Returning default.")
                return default_value

    def save_json(self, data, filename, obfuscated=False):
        path = self.get_path(filename)
        lock = self._get_lock(filename)
        with lock:
            try:
                data_to_save = data
                if obfuscated:
                    # Yuuka: data migration fix v1.1 - X·ª≠ l√Ω t∆∞∆°ng t·ª± khi l∆∞u
                    process_keys = filename != "img_data.json"
                    data_to_save = self._process_data_recursive(data, self._encode_string_b64, process_keys=process_keys)
                
                with open(path, 'w', encoding='utf-8') as f:
                    json.dump(data_to_save, f, indent=2)
                return True
            except IOError as e:
                print(f"üí• [DataManager] CRITICAL ERROR: Could not write data to {path}. Error: {e}")
                return False

    def load_user_data(self, filename, user_hash, default_value={}, obfuscated=False):
        """ƒê·ªçc d·ªØ li·ªáu c·ªßa m·ªôt user c·ª• th·ªÉ t·ª´ m·ªôt file JSON l·ªõn."""
        all_data = self.read_json(filename, default_value={}, obfuscated=obfuscated)
        return all_data.get(user_hash, default_value)

    def save_user_data(self, data_to_save, filename, user_hash, obfuscated=False):
        """L∆∞u d·ªØ li·ªáu cho m·ªôt user c·ª• th·ªÉ v√†o m·ªôt file JSON l·ªõn."""
        # Yuuka: ƒê·ªçc to√†n b·ªô d·ªØ li·ªáu tr∆∞·ªõc ƒë·ªÉ kh√¥ng ghi ƒë√® d·ªØ li·ªáu c·ªßa user kh√°c.
        all_data = self.read_json(filename, default_value={}, obfuscated=obfuscated)
        all_data[user_hash] = data_to_save
        return self.save_json(all_data, filename, obfuscated=obfuscated)

    # --- Yuuka: C√°c h√†m x·ª≠ l√Ω file nh·ªã ph√¢n (·∫£nh) ---
    def read_binary(self, filename: str) -> bytes | None:
        path = self.get_path(filename)
        lock = self._get_lock(filename)
        with lock:
            if not os.path.exists(path): return None
            try:
                with open(path, 'rb') as f:
                    return f.read()
            except IOError:
                return None

    def save_binary(self, data: bytes, filename: str) -> bool:
        path = self.get_path(filename)
        lock = self._get_lock(filename)
        with lock:
            try:
                with open(path, 'wb') as f:
                    f.write(data)
                return True
            except IOError:
                return False
    
    def obfuscate_binary(self, data: bytes) -> bytes:
        """M√£ h√≥a d·ªØ li·ªáu nh·ªã ph√¢n b·∫±ng ph√©p XOR ƒë∆°n gi·∫£n."""
        return bytes([
            b ^ self.OBFUSCATION_KEY[i % len(self.OBFUSCATION_KEY)] 
            for i, b in enumerate(data)
        ])
        
    def deobfuscate_binary(self, obfuscated_data: bytes) -> bytes:
        """Gi·∫£i m√£ d·ªØ li·ªáu nh·ªã ph√¢n."""
        # Yuuka: Ph√©p XOR c√≥ t√≠nh ƒë·ªëi x·ª©ng, n√™n h√†m gi·∫£i m√£ gi·ªëng h·ªát h√†m m√£ h√≥a.
        return self.obfuscate_binary(obfuscated_data)